import pvleopard
import tempfile
from typing import Sequence, Optional
import moviepy as mp
import os
import moviepy.editor as editor
import speech_recognition as sr
from moviepy.video.tools.subtitles import SubtitlesClip

API_KEY = r''

TMP_FILE = 'tmpsub.srt'


def second_to_timecode(x: float) -> str:
    hour, x = divmod(x, 3600)
    minute, x = divmod(x, 60)
    second, x = divmod(x, 1)
    millisecond = int(x * 1000.)

    return '%.2d:%.2d:%.2d,%.3d' % (hour, minute, second, millisecond)


def to_srt(
        words: Sequence[pvleopard.Leopard.Word],
        endpoint_sec: float = 1.,
        length_limit: Optional[int] = 16) -> str:
    def _helper(end: int) -> None:
        lines.append("%d" % section)
        lines.append(
            "%s --> %s" %
            (
                second_to_timecode(words[start].start_sec),
                second_to_timecode(words[end].end_sec)
            )
        )
        lines.append(' '.join(x.word for x in words[start:(end + 1)]))
        lines.append('')

    lines = list()
    section = 0
    start = 0
    for k in range(1, len(words)):
        if ((words[k].start_sec - words[k - 1].end_sec) >= endpoint_sec) or \
                (length_limit is not None and (k - start) >= length_limit):
            _helper(k - 1)
            start = k
            section += 1
    _helper(len(words) - 1)

    return '\n'.join(lines)


def generate_subtitles_from_audio(audio_input):
    leopard = pvleopard.create(
        access_key=API_KEY)
    _, words = leopard.process_file(audio_input)
    with open(TMP_FILE, 'w') as f:
        f.write(to_srt(words))
    return to_srt(words)


def combine_video_and_audio(video_input, audio_input):
    audio = editor.AudioFileClip(audio_input)
    video = editor.VideoFileClip(video_input)
    return video.set_audio(audio)


def combine_video_and_subtitles(video_input, subtitles) -> editor.VideoClip:
    def generator(txt): return editor.TextClip(
        txt, font='Arial', fontsize=24, color='black')
    sub = SubtitlesClip(TMP_FILE, generator)
    sub.set_position(("center", "top"))  # TODO
    final = editor.CompositeVideoClip([video_input, sub])
    return final


def add_autogenerated_subtitles(video_path, audio_path) -> editor.VideoClip:
    video = combine_video_and_audio(video_path, audio_path)
    subs = generate_subtitles_from_audio(audio_path)
    video = combine_video_and_subtitles(video, subs)
    os.remove(TMP_FILE)
    return video


'''example use

INPUT_AUDIO = 'data/testyxd.wav'
INPUT_VIDEO = 'data/example_video.mp4'
v = add_autogenerated_subtitles(INPUT_VIDEO, INPUT_AUDIO)
v.write_videofile('xd.mp4', fps=v.fps)
'''
